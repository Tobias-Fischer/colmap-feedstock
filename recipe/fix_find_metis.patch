diff --git a/cmake/FindMetis.cmake b/cmake/FindMetis.cmake
index a94b6d3fa..654666258 100644
--- a/cmake/FindMetis.cmake
+++ b/cmake/FindMetis.cmake
@@ -1,104 +1,183 @@
-# Copyright (c) 2023, ETH Zurich and UNC Chapel Hill.
-# All rights reserved.
+# METIS Find Module for MSTK
+# Shamelessly stolen from Amanzi open source code https://software.lanl.gov/ascem/trac
 #
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
+# Usage:
+#    Control the search through METIS_DIR or setting environment variable
+#    METIS_ROOT to the METIS installation prefix.
 #
-#     * Redistributions of source code must retain the above copyright
-#       notice, this list of conditions and the following disclaimer.
+#    This module does not search default paths!
 #
-#     * Redistributions in binary form must reproduce the above copyright
-#       notice, this list of conditions and the following disclaimer in the
-#       documentation and/or other materials provided with the distribution.
+#    Following variables are set:
+#    METIS_FOUND            (BOOL)       Flag indicating if METIS was found
+#    METIS_INCLUDE_DIR      (PATH)       Path to the METIS include file
+#    METIS_INCLUDE_DIRS     (LIST)       List of all required include files
+#    METIS_LIBRARY_DIR      (PATH)       Path to the METIS library
+#    METIS_LIBRARY          (FILE)       METIS library
+#    METIS_LIBRARIES        (LIST)       List of all required METIS libraries
 #
-#     * Neither the name of ETH Zurich and UNC Chapel Hill nor the names of
-#       its contributors may be used to endorse or promote products derived
-#       from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
-# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
-# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
-# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
-# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
-# POSSIBILITY OF SUCH DAMAGE.
-#
-# Author: Johannes L. Schoenberger (jsch-at-demuc-dot-de)
+# #############################################################################
 
-# Find package module for Metis library.
-#
-# The following variables are set by this module:
-#
-#   METIS_FOUND: TRUE if Metis is found.
-#   METIS_INCLUDE_DIRS: Include directories for Metis.
-#   METIS_LIBRARIES: Libraries required to link Metis.
-#
-# The following variables control the behavior of this module:
-#
-# METIS_INCLUDE_DIR_HINTS: List of additional directories in which to
-#                              search for Metis includes.
-# METIS_LIBRARY_DIR_HINTS: List of additional directories in which to
-#                              search for Metis libraries.
+# Standard CMake modules see CMAKE_ROOT/Modules
+include(FindPackageHandleStandardArgs)
 
-set(METIS_INCLUDE_DIR_HINTS "" CACHE PATH "Metis include directory")
-set(METIS_LIBRARY_DIR_HINTS "" CACHE PATH "Metis library directory")
+# Amanzi CMake functions see <root>/tools/cmake for source
+#include(PrintVariable)
 
-unset(METIS_FOUND)
-unset(METIS_INCLUDE_DIRS)
-unset(METIS_LIBRARIES)
+if ( METIS_LIBRARIES AND METIS_INCLUDE_DIRS )
 
-find_package(metis CONFIG QUIET)
-if(TARGET metis)
-    set(METIS_FOUND TRUE)
-    set(METIS_LIBRARIES metis)
-    if(METIS_FOUND)
-        message(STATUS "Found Metis")
-        message(STATUS "  Target : ${METIS_LIBRARIES}")
+    # Do nothing. Variables are set. No need to search again
+
+else(METIS_LIBRARIES AND METIS_INCLUDE_DIRS)
+
+    # Cache variables
+    if(METIS_DIR)
+        set(METIS_DIR "${METIS_DIR}" CACHE PATH "Path to search for METIS include and library files")
+	else()
+		if( DEFINED ENV{METIS_ROOT} )
+			set(METIS_DIR "$ENV{METIS_ROOT}" CACHE PATH "Path to search for METIS include and library files")
+		endif()
     endif()
-else()
-    list(APPEND METIS_CHECK_INCLUDE_DIRS
-        ${METIS_INCLUDE_DIR_HINTS}
-        /usr/include
-        /usr/local/include
-        /opt/include
-        /opt/local/include
-    )
-
-    list(APPEND METIS_CHECK_LIBRARY_DIRS
-        ${METIS_LIBRARY_DIR_HINTS}
-        /usr/lib
-        /usr/local/lib
-        /opt/lib
-        /opt/local/lib
-    )
-
-    find_path(METIS_INCLUDE_DIRS
-        NAMES
-        metis.h
-        PATHS
-        ${METIS_CHECK_INCLUDE_DIRS})
-    find_library(METIS_LIBRARIES
-        NAMES
-        metis
-        PATHS
-        ${METIS_CHECK_LIBRARY_DIRS})
-    find_library(GK_LIBRARIES
-        NAMES
-        GKlib
-        PATHS
-        ${METIS_CHECK_LIBRARY_DIRS})
-
-    if(METIS_FOUND)
-        message(STATUS "Found Metis")
-        message(STATUS "  Includes : ${METIS_INCLUDE_DIRS}")
-        message(STATUS "  Libraries : ${METIS_LIBRARIES}")
+
+    if(METIS_INCLUDE_DIR)
+        set(METIS_INCLUDE_DIR "${METIS_INCLUDE_DIR}" CACHE PATH "Path to search for METIS include files")
     endif()
-endif()
 
-if(NOT METIS_FOUND AND METIS_FIND_REQUIRED)
-    message(FATAL_ERROR "Could not find Metis")
+    if(METIS_LIBRARY_DIR)
+        set(METIS_LIBRARY_DIR "${METIS_LIBRARY_DIR}" CACHE PATH "Path to search for METIS library files")
+    endif()
+
+   
+    # Search for include files
+    # Search order preference:
+    #  (1) METIS_INCLUDE_DIR - check existence of path AND if the include files exist
+    #  (2) METIS_DIR/<include>
+    #  (3) Default CMake paths See cmake --html-help=out.html file for more information.
+    #
+    set(metis_inc_names "metis.h")
+    if (METIS_INCLUDE_DIR)
+
+        if (EXISTS "${METIS_INCLUDE_DIR}")
+
+            find_path(metis_test_include_path
+                      NAMES ${metis_inc_names}
+                      HINTS ${METIS_INCLUDE_DIR}
+                      NO_DEFAULT_PATH)
+
+            set(METIS_INCLUDE_DIR "${metis_test_include_path}")
+
+        else()
+            message(SEND_ERROR "METIS_INCLUDE_DIR=${METIS_INCLUDE_DIR} does not exist")
+            set(METIS_INCLUDE_DIR "METIS_INCLUDE_DIR-NOTFOUND")
+        endif()
+
+   else()
+
+# Metis sometimes puts the include files in a subdir called Lib
+
+        set(metis_inc_suffixes "include" "Lib")
+        if(METIS_DIR)
+
+            if (EXISTS "${METIS_DIR}" )
+
+                find_path(METIS_INCLUDE_DIR
+                          NAMES ${metis_inc_names}
+                          HINTS ${METIS_DIR}
+                          PATH_SUFFIXES ${metis_inc_suffixes}
+                          NO_DEFAULT_PATH)
+
+            else()
+                 message(SEND_ERROR "METIS_DIR=${METIS_DIR} does not exist")
+                 set(METIS_INCLUDE_DIR "METIS_INCLUDE_DIR-NOTFOUND")
+            endif()   
+
+
+        else()
+
+            find_path(METIS_INCLUDE_DIR
+                      NAMES ${metis_inc_names} 
+                      PATH_SUFFIXES ${metis_inc_suffixes})
+
+        endif()
+
+    endif()
+
+
+    # Search for libraries
+    # Search order preference:
+    #  (1) METIS_LIBRARY_DIR - check existence of path AND if the library file exists
+    #  (2) METIS_DIR/<lib,Lib>
+    #  (3) Default CMake paths See cmake --html-help=out.html file for more information.
+    #
+    set(metis_lib_names "metis")
+    if (METIS_LIBRARY_DIR)
+
+        if (EXISTS "${METIS_LIBRARY_DIR}")
+
+            find_library(METIS_LIBRARY
+                         NAMES ${metis_lib_names}
+                         HINTS ${METIS_LIBRARY_DIR}
+                         NO_DEFAULT_PATH)
+        else()
+            message(SEND_ERROR "METIS_LIBRARY_DIR=${METIS_LIBRARY_DIR} does not exist")
+            set(METIS_LIBRARY "METIS_LIBRARY-NOTFOUND")
+        endif()
+
+    else()
+
+        list(APPEND metis_lib_suffixes "lib" "Lib")
+        if(METIS_DIR)
+
+            if (EXISTS "${METIS_DIR}" )
+
+                find_library(METIS_LIBRARY
+                             NAMES ${metis_lib_names}
+                             HINTS ${METIS_DIR}
+                             PATH_SUFFIXES ${metis_lib_suffixes}
+                             NO_DEFAULT_PATH)
+
+            else()
+                 message(SEND_ERROR "METIS_DIR=${METIS_DIR} does not exist")
+                 set(METISLIBRARY "METIS_LIBRARY-NOTFOUND")
+            endif()   
+
+
+        else()
+
+            find_library(METIS_LIBRARY
+                         NAMES ${metis_lib_names}
+                         PATH_SUFFIXES ${metis_lib_suffixes})
+
+        endif()
+
+    endif()
+ 
+
+   
+    # Define prerequisite packages
+    set(METIS_INCLUDE_DIRS ${METIS_INCLUDE_DIR})
+    set(METIS_LIBRARIES    ${METIS_LIBRARY})
+
+   
+endif(METIS_LIBRARIES AND METIS_INCLUDE_DIRS )   
+
+# Send useful message if everything is found
+find_package_handle_standard_args(Metis DEFAULT_MSG
+                                  METIS_LIBRARIES
+                                  METIS_INCLUDE_DIRS)
+
+# find_package_handle_standard_args should set METIS_FOUND but it does not!
+if ( METIS_LIBRARIES AND METIS_INCLUDE_DIRS)
+    set(METIS_FOUND TRUE)
+else()
+    set(METIS_FOUND FALSE)
 endif()
+
+# Define the version
+
+mark_as_advanced(
+  METIS_INCLUDE_DIR
+  METIS_INCLUDE_DIRS
+  METIS_LIBRARY
+  METIS_LIBRARIES
+  METIS_LIBRARY_DIR
+)
